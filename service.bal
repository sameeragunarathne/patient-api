// // Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com). All Rights Reserved.

// This software is the property of WSO2 LLC. and its suppliers, if any.
// Dissemination of any information or reproduction of any material contained
// herein is strictly forbidden, unless permitted by WSO2 in accordance with
// the WSO2 Software License available at: https://wso2.com/licenses/eula/3.2
// For specific language governing the permissions and limitations under
// this license, please see the license as well as any agreement youâ€™ve
// entered into with WSO2 governing the purchase of this software and any
// associated services.
//
//
// AUTO-GENERATED FILE.
//
// This file is auto-generated by WSO2 Healthcare Team for implementing resource functions.
// Developers are allowed modify this file as per the requirement.

import wso2healthcare/healthcare.fhir.r4;
import ballerina/log;
import ballerina/http;

# Generic type to wrap all implemented profiles. 
# Add required profile types here.
# public type Patient r4:Patient|r4:USCorePatient;
public type Patient r4:Patient;

//add implemented profiles to this map. profileURL:implementation
isolated final map<PatientSourceConnect> profileImpl = {
    "http://hl7.org/fhir/StructureDefinition/Patient": new InternationalPatientSourceConnect()
};

# A service representing a network-accessible API
# bound to port `9090`.
@http:ServiceConfig {
    interceptors: [
        new r4:FHIRReadRequestInterceptor(apiConfig),
        new r4:FHIRCreateRequestInterceptor(apiConfig),
        new r4:FHIRSearchRequestInterceptor(apiConfig),
        new r4:FHIRRequestErrorInterceptor(),
        new r4:FHIRResponseInterceptor(apiConfig),
        new r4:FHIRResponseErrorInterceptor()
    ]
}
service / on new http:Listener(9090) {

    // Search the resource type based on some filter criteria
    isolated resource function get fhir/r4/Patient(http:RequestContext ctx, http:Request request) returns @http:Payload {mediaType: [r4:FHIR_MIME_TYPE_JSON, r4:FHIR_MIME_TYPE_XML]} json|xml|r4:FHIRError|error {

        r4:FHIRContext fhirContext = check r4:getFHIRContext(ctx);
        r4:RequestSearchParameter[]? & readonly profileUrls = fhirContext.getRequestSearchParameter("_profile");
        r4:FHIRRequest resourceName = <r4:FHIRRequest>fhirContext.getFHIRRequest();

        log:printDebug(string `FHIR API request is received. Interaction: SEARCH, [profiles]: ${profileUrls.toBalString()} 
        [resource]: ${resourceName.getResourceType().toBalString()}`);

        //Passing the Interaction processing to the r4 package with current context.
        error? process = r4:processFHIRSourceConnections(srcConnectImpl, ctx);

        if process is error {
            log:printError("Error in source connection processing");
        }
        log:printDebug("[END]FHIR interaction : search");
        return;
    }
    // Read the current state of the resource
    resource function get fhir/r4/Patient/[string id](http:RequestContext ctx) returns @http:Payload {mediaType: [r4:FHIR_MIME_TYPE_JSON, r4:FHIR_MIME_TYPE_XML]} json|xml|r4:FHIRError {

        r4:FHIRContext fhirContext = check r4:getFHIRContext(ctx);
        r4:FHIRRequest resourceName = <r4:FHIRRequest>fhirContext.getFHIRRequest();

        log:printDebug(string `FHIR API request is received. Interaction: READ, 
        [resource]: ${resourceName.getResourceType().toBalString()}`);

        //Passing the Interaction processing to the r4 package with current context.
        error? process = r4:processFHIRSourceConnections(srcConnectImpl, ctx);

        if process is error {
            log:printError("Error in source connection processing");
        }

        log:printDebug("[END]FHIR interaction : read");
        return;

    }
    // Create a new resource with a server assigned id
    resource function post fhir/r4/Patient(http:RequestContext ctx, http:Request request) returns @http:Payload {mediaType: [r4:FHIR_MIME_TYPE_JSON, r4:FHIR_MIME_TYPE_XML]} json|r4:FHIRError {

        r4:FHIRContext fhirContext = check r4:getFHIRContext(ctx);
        r4:FHIRRequest resourceName = <r4:FHIRRequest>fhirContext.getFHIRRequest();

        log:printDebug(string `FHIR API request is received. Interaction: CREATE, 
        [resource]: ${resourceName.getResourceType().toBalString()}`);

        //Passing the Interaction processing to the r4 package with current context.
        error? process = r4:processFHIRSourceConnections(srcConnectImpl, ctx);

        if process is error {
            log:printError("Error in source connection processing");
        }

        log:printDebug("[END]FHIR interaction : create");
        return {};

    }

}
